{
  "version": 3,
  "sources": ["../src/simplicite.js"],
  "sourcesContent": ["/**\r\n * Simplicite(R) platform Javascript API client module (for node.js and browser).\r\n * @module simplicite\r\n * @version 2.2.0\r\n * @license Apache-2.0\r\n */\r\n\r\nimport fetch  from 'node-fetch';\r\nimport buffer from 'buffer';\r\n\r\n/**\r\n * Constants\r\n * @constant\r\n*/\r\nconst constants = {\r\n\t/**\r\n\t * Default row ID field name\r\n\t * @const {string}\r\n\t */\r\n\tDEFAULT_ROW_ID_NAME: 'row_id',\r\n\r\n\t/**\r\n\t * Default row ID value\r\n\t * @const {string}\r\n\t */\r\n\tDEFAULT_ROW_ID: '0',\r\n\r\n\t/**\r\n\t * Default context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_NONE: 0,\r\n\t/**\r\n\t * Search context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_SEARCH: 1,\r\n\t/**\r\n\t * List context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_LIST: 2,\r\n\t/**\r\n\t * Creation context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_CREATE: 3,\r\n\t/**\r\n\t * Copy context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_COPY: 4,\r\n\t/**\r\n\t * Update context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_UPDATE: 5,\r\n\t/**\r\n\t * Delete context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_DELETE: 6,\r\n\t/**\r\n\t * Chart context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_GRAPH: 7,\r\n\t/**\r\n\t * Pivot table context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_CROSSTAB: 8,\r\n\t/**\r\n\t * Publication context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_PRINTTMPL: 9,\r\n\t/**\r\n\t * Bulk update context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_UPDATEALL: 10,\r\n\t/**\r\n\t * Reference selection context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_REFSELECT: 11,\r\n\t/**\r\n\t * Datamap selection context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_DATAMAPSELECT: 12,\r\n\t/**\r\n\t * Pre validation context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_PREVALIDATE: 13,\r\n\t/**\r\n\t * Post validation context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_POSTVALIDATE: 14,\r\n\t/**\r\n\t * State transition context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_STATETRANSITION: 15,\r\n\t/**\r\n\t * Export context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_EXPORT: 16,\r\n\t/**\r\n\t * Import context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_IMPORT: 17,\r\n\t/**\r\n\t * Association context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_ASSOCIATE: 18,\r\n\t/**\r\n\t * Panle list context\r\n\t * @const {number}\r\n\t */\r\n\tCONTEXT_PANELLIST: 19,\r\n\r\n\t/**\r\n\t * Foreign key (reference) type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_ID: 0,\r\n\t/**\r\n\t * Integer type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_INT: 1,\r\n\t/**\r\n\t * Decimal type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_FLOAT: 2,\r\n\t/**\r\n\t * Short string type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_STRING: 3,\r\n\t/**\r\n\t * Date type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_DATE: 4,\r\n\t/**\r\n\t * Date and time type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_DATETIME: 5,\r\n\t/**\r\n\t * Time type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_TIME: 6,\r\n\t/**\r\n\t * Simple enumeration type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_ENUM: 7,\r\n\t/**\r\n\t * Boolean type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_BOOLEAN: 8,\r\n\t/**\r\n\t * Password type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_PASSWORD: 9,\r\n\t/**\r\n\t * URL type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_URL: 10,\r\n\t/**\r\n\t * HTML content type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_HTML: 11,\r\n\t/**\r\n\t * Email type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_EMAIL: 12,\r\n\t/**\r\n\t * Long string type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_LONG_STRING: 13,\r\n\t/**\r\n\t * Multiple enumeration type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_ENUM_MULTI: 14,\r\n\t/**\r\n\t * Validated string type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_REGEXP: 15,\r\n\t/**\r\n\t * Document type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_DOC: 17,\r\n\t/**\r\n\t * Decimal type\r\n\t * @const {number}\r\n\t * @deprecated\r\n\t */\r\n\tTYPE_FLOAT_EMPTY: 18,\r\n\t/**\r\n\t * External file type\r\n\t * @const {number}\r\n\t * @deprecated\r\n\t */\r\n\tTYPE_EXTFILE: 19,\r\n\t/**\r\n\t * Image type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_IMAGE: 20,\r\n\t/**\r\n\t * Notepad type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_NOTEPAD: 21,\r\n\t/**\r\n\t * Phone number type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_PHONENUM: 22,\r\n\t/**\r\n\t * RGB color type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_COLOR: 23,\r\n\t/**\r\n\t * Object type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_OBJECT: 24,\r\n\t/**\r\n\t * Geocoordinates type\r\n\t * @const {number}\r\n\t */\r\n\tTYPE_GEOCOORDS: 25,\r\n\r\n\t/**\r\n\t * Not visible\r\n\t * @const {number}\r\n\t */\r\n\tVIS_NOT: 0,\r\n\t/**\r\n\t * Hiiden (same as not visible)\r\n\t * @const {number}\r\n\t */\r\n\tVIS_HIDDEN: 0,\r\n\t/**\r\n\t * Visible on lists only\r\n\t * @const {number}\r\n\t */\r\n\tVIS_LIST: 1,\r\n\t/**\r\n\t * Visible on forms only\r\n\t * @const {number}\r\n\t */\r\n\tVIS_FORM: 2,\r\n\t/**\r\n\t * Visible on both lists and forms only\r\n\t * @const {number}\r\n\t */\r\n\tVIS_BOTH: 3,\r\n\r\n\t/**\r\n\t * No search\r\n\t * @const {number}\r\n\t */\r\n\tSEARCH_NONE: 0,\r\n\t/**\r\n\t * Simple search\r\n\t * @const {number}\r\n\t */\r\n\tSEARCH_MONO: 1,\r\n\t/**\r\n\t * Multiple search (checkboxes)\r\n\t * @const {number}\r\n\t */\r\n\tSEARCH_MULTI_CHECK: 2,\r\n\t/**\r\n\t * Multiple search (listbox)\r\n\t * @const {number}\r\n\t */\r\n\tSEARCH_MULTI_LIST: 3,\r\n\t/**\r\n\t * Search by period (date/time)\r\n\t * @const {number}\r\n\t */\r\n\tSEARCH_PERIOD: 4,\r\n\r\n\t/**\r\n\t * True\r\n\t * @constant {string}\r\n\t */\r\n\tTRUE: '1',\r\n\t/**\r\n\t * False\r\n\t * @constant {string}\r\n\t */\r\n\tFALSE: '0',\r\n\r\n\t/**\r\n\t * Fatal error level\r\n\t * @const {number}\r\n\t */\r\n\tERRLEVEL_FATAL: 1,\r\n\t/**\r\n\t * Error level\r\n\t * @const {number}\r\n\t */\r\n\tERRLEVEL_ERROR: 2,\r\n\t/**\r\n\t * Warning level\r\n\t * @const {number}\r\n\t */\r\n\tERRLEVEL_WARNING: 3,\r\n\r\n\t/**\r\n\t * Image resource type\r\n\t * @const {number}\r\n\t */\r\n\tRESOURCE_TYPE_IMAGE: 'IMG',\r\n\t/**\r\n\t * Icon resource type\r\n\t * @const {number}\r\n\t */\r\n\tRESOURCE_TYPE_ICON: 'ICO',\r\n\t/**\r\n\t * Stylesheet resource type\r\n\t * @const {number}\r\n\t */\r\n\tRESOURCE_TYPE_STYLESHEET: 'CSS',\r\n\t/**\r\n\t * Javascript resource type\r\n\t * @const {number}\r\n\t */\r\n\tRESOURCE_TYPE_JAVASCRIPT: 'JS'\r\n};\r\n\r\n/**\r\n * Simplicite application session.\r\n * @param {object} params Parameters (see session class for details)\r\n * @return {Session} session\r\n*/\r\nfunction session(params) {\r\n\treturn new Session(params);\r\n}\r\n\r\n/**\r\n * Simplicite application session.\r\n * @param {object} params Parameters\r\n * @param {string} params.url Base URL of the Simplicite application\r\n * @param {string} params.scheme URL scheme (e.g. <code>'https'</code>) of the Simplicite application (not needed if <code>url</code> is set)\r\n * @param {string} params.host Hostname or IP address (e.g. <code>'myhost.mydomain.com'</code>) of the Simplicite application (not needed if <code>url</code> is set)\r\n * @param {number} params.port Port (e.g. <code>443</code>) of the Simplicite application (not needed if <code>url</code> is set)\r\n * @param {string} params.root Root context URL (e.g. <code>'/myapp'</code>) the Simplicite application (not needed if <code>url</code> is set)\r\n * @param {boolean} [params.endpoint='api'] Endpoint (<code>'api'|'ui'|'public'</code>)\r\n * @param {string} [params.username] Username (not needed for public endpoint)\r\n * @param {string} [params.password] Password (not needed for public endpoint)\r\n * @param {string} [params.authtoken] Auth token (if set, username and password are not needed; not needed for public endpoint)\r\n * @param {boolean} [params.debug=false] Debug mode?\r\n * @param {function} [params.debugHandler] Debug handler function\r\n * @param {function} [params.infoHandler] Info handler function\r\n * @param {function} [params.warningHandler] Warning handler function\r\n * @param {function} [params.errorHandler] Error handler function\r\n * @param {function} [params.logHandler] Log handler function\r\n * @class\r\n */\r\nfunction Session(params) {\r\n\tparams = params || {};\r\n\r\n\t/**\r\n\t * Constants\r\n\t * @constant\r\n\t */\r\n\tthis.constants = constants;\r\n\r\n\t/**\r\n\t * Is used within generic UI?\r\n\t * @constant\r\n\t */\r\n\tthis.endpoint = params.endpoint || 'api';\r\n\r\n\t/**\r\n\t * Log handler\r\n\t * @param {...any} args Arguments\r\n\t * @function\r\n\t */\r\n\tthis.log = params.logHandler || ((...args) => { console.log(args); });\r\n\r\n\t/**\r\n\t * Info handler\r\n\t * @param {...any} args Arguments\r\n\t * @function\r\n\t */\r\n\tthis.info = params.infoHandle || ((...args) => { console.info('INFO', args); });\r\n\r\n\t/**\r\n\t * Warning handler\r\n\t * @param {...any} args Arguments\r\n\t * @function\r\n\t */\r\n\tthis.warn = params.warningHandler || ((...args) => { console.warn('WARN', args); });\r\n\t\r\n\t/**\r\n\t * Error handler\r\n\t * @param {...any} args Arguments\r\n\t * @function\r\n\t */\r\n\tthis.error = params.errorHandler || ((...args) => { console.error('ERROR', args); });\r\n\r\n\tconst _debug = !!params.debug;\r\n\r\n\t/**\r\n\t * Debug handler\r\n\t * @param {...any} args Arguments\r\n\t * @function\r\n\t */\r\n\tthis.debug = params.debugHandler || ((...args) => { if (_debug) console.log('DEBUG', args); });\r\n\r\n\t/**\r\n\t * Timeout (seconds)\r\n\t * @default 30\r\n\t * @member {number}\r\n\t */\r\n\tthis.timeout = params.timeout || 30;\r\n\r\n\tif (params.url) {\r\n\t\ttry {\r\n\t\t\tparams.scheme = params.url.replace(/:.*$/, '');\r\n\t\t\tconst u = params.url.replace(new RegExp('^' + params.scheme + '://'), '').split(':');\r\n\t\t\tif (u.length === 1) {\r\n\t\t\t\tparams.host = u[0].replace(/\\/.*$/, '');\r\n\t\t\t\tparams.port = params.scheme === 'http' ? 80 : 443;\r\n\t\t\t\tparams.root = u[0].replace(new RegExp('^' + params.host + '/?'), '');\r\n\t\t\t} else {\r\n\t\t\t\tparams.host = u[0];\r\n\t\t\t\tparams.port = parseInt(u[1].replace(/\\/.*$/, ''), 10);\r\n\t\t\t\tif (isNaN(params.port))\r\n\t\t\t\t\tthrow new Error('Incorrect port');\r\n\t\t\t\tparams.root = u[1].replace(new RegExp('^' + params.port + '/?'), '');\r\n\t\t\t}\r\n\t\t\tif (params.root === '/')\r\n\t\t\t\tparams.root = '';\r\n\t\t} catch (e) {\r\n\t\t\tthis.error('Unable to parse URL [' + params.url + ']: ' + e.message);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\t\r\n\tconst scheme = params.scheme || (params.port === 443 ? 'https' : 'http');\r\n\tif (scheme !== 'http' && scheme !== 'https') {\r\n\t\tthis.error('Incorrect scheme [' + params.scheme + ']');\r\n\t\treturn;\r\n\t}\r\n\tconst host = params.host || 'localhost';\r\n\tconst port = params.port || 8080;\r\n\tlet root = params.root || '';\r\n\tif (root === '/')\r\n\t\troot = '';\r\n\t\r\n\tlet url = scheme + '://' + host;\r\n\tif ((scheme === 'http' && port != 80) || (scheme === 'https' && port != 443))\r\n\t\turl += ':' + port;\r\n\tif (root !== '')\r\n\t\turl += root.startsWith('/') ? root : '/' + root;\r\n\tthis.debug('[simplicite] Base URL = ' + url);\r\n\r\n\tconst ep = this.endpoint == 'public' ? '' : '/' + this.endpoint;\r\n\r\n\t/**\r\n\t * Parameters\r\n\t * @constant {object}\r\n\t */\r\n\tthis.parameters = {\r\n\t\tscheme: scheme,\r\n\t\thost: host,\r\n\t\tport: port,\r\n\t\troot: root,\r\n\t\turl: url,\r\n\t\thealthpath: (ep == '/ui' ? ep : '') + '/health?format=json',\r\n\t\tapppath: ep + '/json/app',\r\n\t\tobjpath: ep + '/json/obj',\r\n\t\textpath: ep + '/ext',\r\n\t\tdocpath: ep + '/raw/document',\r\n\t\trespath: '/resource'\r\n\t};\r\n\r\n\t/**\r\n\t * Username\r\n\t * @member {string}\r\n\t */\r\n\tthis.username = params.username || params.login; // naming flexibility\r\n\r\n\t/**\r\n\t * Set username\r\n\t * @param {string} usr Username\r\n\t * @function\r\n\t */\r\n\tthis.setUsername = (usr) => {\r\n\t\tthis.username = usr;\r\n\t};\r\n\r\n\t/**\r\n\t * Password\r\n\t * @member {string}\r\n\t */\r\n\tthis.password = params.password || params.pwd; // naming flexibility\r\n\r\n\t/**\r\n\t * Set password\r\n\t * @param {string} pwd Password\r\n\t * @function\r\n\t */\r\n\tthis.setPassword = (pwd) => {\r\n\t\tthis.password = pwd;\r\n\t};\r\n\r\n\t/**\r\n\t * Auth token\r\n\t * @member {string}\r\n\t */\r\n\tthis.authtoken = params.authtoken || params.authToken || params.token; // naming flexibility\r\n\r\n\t/**\r\n\t * Set auth token\r\n\t * @param {string} tkn Auth token\r\n\t * @function\r\n\t */\r\n\tthis.setAuthToken = (tkn) => {\r\n\t\tthis.authtoken = tkn;\r\n\t};\r\n\r\n\t/**\r\n\t * Business objects cache\r\n\t * @type {object}\r\n\t * @private\r\n\t */\r\n\tlet businessObjectCache = {};\r\n\r\n\t/**\r\n\t * Get business object cache key\r\n\t * @param {string} name Business object name\r\n\t * @param {string} [instance] Business object instance name, defaults to <code>js_&lt;object name&gt;</code>\r\n\t * @return {object} Business object cache key\r\n\t * @private\r\n\t */\r\n\tthis.getBusinessObjectCacheKey = (name, instance) => {\r\n\t\treturn name + ':' + (instance || 'js_' + name);\r\n\t};\r\n\r\n\t/**\r\n\t * Clears all data (credentials, objects, ...)\r\n\t * @function\r\n\t */\r\n\tthis.clear = () => {\r\n\t\tthis.username = undefined;\r\n\t\tthis.password = undefined;\r\n\t\tthis.authtoken = undefined;\r\n\t\tthis.sessionid = undefined;\r\n\r\n\t\tthis.grant = undefined;\r\n\r\n\t\tthis.appinfo = undefined;\r\n\t\tthis.sysinfo = undefined;\r\n\t\tthis.devinfo = undefined;\r\n\t\tthis.userinfo = undefined;\r\n\r\n\t\tbusinessObjectCache = {};\r\n\t};\r\n\r\n\t/**\r\n\t * Basic HTTP authorization header\r\n\t * @private\r\n\t */\r\n\tthis.getBasicAuthHeader = () => {\r\n\t\treturn this.username && this.password\r\n\t\t\t? 'Basic ' + buffer.Buffer.from(this.username + ':' + this.password).toString('base64')\r\n\t\t\t: undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Get bearer token header\r\n\t * @private\r\n\t */\r\n\tthis.getBearerTokenHeader = () => {\r\n\t\treturn this.authtoken\r\n\t\t\t? 'Bearer ' + this.authtoken\r\n\t\t\t: undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Request\r\n\t * @param {string} path Path\r\n\t * @param {object} [data] Data\r\n\t * @param {function} [callback] Callback\r\n\t * @param {function} [errorHandler] Error handler\r\n\t * @private\r\n\t */\r\n\tthis.req = (path, data, callback, errorHandler) => {\r\n\t\tconst self = this;\r\n\t\tconst m = data ? 'POST' : 'GET';\r\n\t\tconst h = {};\r\n\t\tif (data)\r\n\t\t\th['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';\r\n\t\tlet b = self.getBearerTokenHeader();\r\n\t\tif (b) {\r\n\t\t\th['X-Simplicite-Authorization'] = b;\r\n\t\t} else {\r\n\t\t\tb = self.getBasicAuthHeader();\r\n\t\t\tif (b)\r\n\t\t\t\th.Authorization = b;\r\n\t\t}\r\n\t\tconst u = self.parameters.url + path || '/';\r\n\t\tconst d = data ? (typeof data === 'string' ? data : JSON.stringify(data)) : undefined;\r\n\t\tself.debug('[simplicite.req] ' + m + ' ' + u + (d ? ' with ' + d : ''));\r\n\t\tfetch(u, {\r\n\t\t\tmethod: m,\r\n\t\t\theaders: h,\r\n\t\t\ttimeout: self.timeout * 1000, // useless because there is no timeout in fetch API\r\n\t\t\tmode: 'cors',\r\n\t\t\tcredentials: 'include',\r\n\t\t\tbody: d\r\n\t\t}).then(res => {\r\n\t\t\tif (callback) {\r\n\t\t\t\tres.text().then(textData => {\r\n\t\t\t\t\tcallback.call(self, textData, res.status, res.headers);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}).catch(err => {\r\n\t\t\tconst s = err.response && err.response.status ? err.response.status : undefined;\r\n\t\t\tconst e = err.response && err.response.data ? err.response.data : err;\r\n\t\t\tif (errorHandler)\r\n\t\t\t\terrorHandler.call(self, self.getError.call(self, e, s));\r\n\t\t\telse\r\n\t\t\t\tthrow e;\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Get error object\r\n\t * @param {(string|object)} err Error\r\n\t * @param {string} err.message Error message\r\n\t * @param {number} [status] Error status\r\n\t * @private\r\n\t */\r\n\tthis.getError = (err, status) => {\r\n\t\tif (typeof err === 'string') // plain text error\r\n\t\t\treturn { message: err, status: status || 200 };\r\n\t\telse if (err.response) // wrapped error\r\n\t\t\treturn typeof err.response === 'string' ? { message: err.response, status: status || 200 } : err.response;\r\n\t\telse\r\n\t\t\treturn err;\r\n\t};\r\n\r\n\t/**\r\n\t * Parse result\r\n\t * @param {object} res Response to parse\r\n\t * @param {number} [status=200] HTTP status\r\n\t * @private\r\n\t */\r\n\tthis.parse = (res, status) => {\r\n\t\ttry {\r\n\t\t\tif (status !== 200)\r\n\t\t\t\treturn { type: 'error', response: this.getError('HTTP status: ' + status, status) };\r\n\t\t\treturn typeof res === 'object' ? res : JSON.parse(res);\r\n\t\t} catch (e) {\r\n\t\t\treturn { type: 'error', response: this.getError('Parsing error: ' + e.message, status) };\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Get health check (no need to be authenticated)\r\n\t * @param {object} [opts] Options\r\n\t * @param {boolean} [opts.full=false] Full health check?\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} Promise to the health data\r\n\t * @function\r\n\t */\r\n\tthis.getHealth = (opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tself.req.call(self, self.parameters.healthpath + '&full=' + !!opts.full, undefined, (res, status) => {\r\n\t\t\t\tconst r = self.parse(res, status);\r\n\t\t\t\tself.debug('[simplicite.getHealth] HTTP status = ' + status + ', response type = ' + res);\r\n\t\t\t\tif (r.type === 'error')\r\n\t\t\t\t\t(opts.error || self.error || reject).call(self, r.response);\r\n\t\t\t\telse\r\n\t\t\t\t\tresolve && resolve.call(self, r);\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.error || reject).call(self, self.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Login\r\n\t * @param {object} [opts] Options\r\n\t * @param {string} [opts.username] Username (exclusive with authentication token)\r\n\t * @param {string} [opts.password] Password (required if username is set)\r\n\t * @param {string} [opts.authtoken] Authentication token ((exclusive with username)\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} Promise to the login result\r\n\t * @function\r\n\t */\r\n\tthis.login = (opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tif ((opts.username || opts.login) && (opts.password || opts.pwd)) {\r\n\t\t\t\tself.clear();\r\n\t\t\t\tself.username = opts.username || opts.login;\r\n\t\t\t\tself.password = opts.password || opts.pwd;\t\r\n\t\t\t} else if (opts.authtoken || opts.authToken || opts.token) {\r\n\t\t\t\tself.clear();\r\n\t\t\t\tself.authtoken = opts.authtoken || opts.authToken || opts.token;\t\r\n\t\t\t}\r\n\t\t\tself.req.call(self, self.parameters.apppath + '?action=session', undefined, (res, status) => {\r\n\t\t\t\tconst r = self.parse(res, status);\r\n\t\t\t\tself.debug('[simplicite.login] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.sessionid = r.response.id;\r\n\t\t\t\t\tself.debug('[simplicite.login] Session ID = ' + self.sessionid);\r\n\t\t\t\t\tself.username = r.response.login;\r\n\t\t\t\t\tif (self.username)\r\n\t\t\t\t\t\tself.debug('[simplicite.login] Username = ' + self.username);\r\n\t\t\t\t\tself.authtoken = r.response.authtoken;\r\n\t\t\t\t\tif (self.authtoken)\r\n\t\t\t\t\t\tself.debug('[simplicite.login] Auth token = ' + self.authtoken);\r\n\t\t\t\t\t// Minimal grant from session data\r\n\t\t\t\t\tself.grant = Object.assign(new Grant(), {\r\n\t\t\t\t\t\tlogin: r.response.login,\r\n\t\t\t\t\t\tuserid: r.response.userid,\r\n\t\t\t\t\t\tfirstname: r.response.firstanme,\r\n\t\t\t\t\t\tlastname: r.response.lastname,\r\n\t\t\t\t\t\temail: r.response.email\r\n\t\t\t\t\t});\r\n\t\t\t\t\tresolve && resolve.call(self, r.response);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.error || reject).call(self, self.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Logout\r\n\t * @param {function} callback Callback (called upon success)\r\n\t * @param {object} [opts] Options\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} Promise to the logout result\r\n\t * @function\r\n\t */\r\n\tthis.logout = (opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tself.req.call(self, self.parameters.apppath + '?action=logout', undefined, (res, status) => {\r\n\t\t\t\tconst r = self.parse(res, status);\r\n\t\t\t\tself.debug('[simplicite.logout] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.clear();\r\n\t\t\t\t\tresolve && resolve.call(self, r.response);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\tif (err.status === 401) // Removes (expired or deleted) token if any\r\n\t\t\t\t\tself.authtoken = undefined;\r\n\t\t\t\t(opts.error || self.error || reject).call(self, self.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Grant\r\n\t * @member {Grant}\r\n\t */\r\n\tthis.grant = undefined;\r\n\r\n\t/**\r\n\t * Get grant (current user data)\r\n\t * @param {object} [opts] Options\r\n\t * @param {boolean} [opts.inlinePicture=false] Inline user picture?\r\n\t * @param {boolean} [opts.includeTexts=false] Include texts?\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<Grant>} A promise to the grant (also available as the <code>grant</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.getGrant = (opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet p = '&web=true'; // Required to be able to include texts \r\n\t\t\tif (opts.inlinePicture || opts.picture) // naming flexibility\r\n\t\t\t\tp += '&inline_picture=' + (!!opts.inlinePicture || !!opts.picture);\r\n\t\t\tif (opts.includeTexts || opts.texts)\r\n\t\t\t\tp += '&texts=' + (!!opts.includeTexts || !!opts.texts);\r\n\t\t\tself.req.call(self, self.parameters.apppath + '?action=getgrant' + p, undefined, (res, status) => {\r\n\t\t\t\tconst r = self.parse(res, status);\r\n\t\t\t\tself.debug('[simplicite.getGrant] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.grant = Object.assign(new Grant(), r.response);\r\n\t\t\t\t\tresolve && resolve.call(self, self.grant);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.error || reject).call(self, self.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Change password\r\n\t * @param {string} pwd Password\r\n\t * @param {object} [opts] Options\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} A promise to the change password result\r\n\t * @function\r\n\t */\r\n\tthis.changePassword = (pwd, opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tself.req.call(self, self.parameters.apppath + '?action=setpassword&password=' + encodeURIComponent(pwd), undefined, (res, status) => {\r\n\t\t\t\tconst r = self.parse(res, status);\r\n\t\t\t\tself.debug('[simplicite.changePassword] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error')\r\n\t\t\t\t\t(opts.error || self.error || reject).call(self, r.response);\r\n\t\t\t\telse\r\n\t\t\t\t\tresolve && resolve.call(self, r.response);\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.error || reject).call(self, self.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Get application info\r\n\t * @param {object} [opts] Options\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} A promise to the application info (also avialable as the <code>appinfo</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.getAppInfo = (opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tself.req.call(self, self.parameters.apppath + '?action=getinfo', undefined, (res, status) => {\r\n\t\t\t\tconst r = self.parse(res, status);\r\n\t\t\t\tself.debug('[simplicite.getAppInfo] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.appinfo = r.response;\r\n\t\t\t\t\tresolve && resolve.call(self, self.appinfo);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.error || reject).call(self, self.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Get system info\r\n\t * @param {object} [opts] Options\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} A promise to the system info (also avialable as the <code>sysinfo</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.getSysInfo = (opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tself.req.call(self, self.parameters.apppath + '?action=sysinfo', undefined, (res, status) => {\r\n\t\t\t\tconst r = self.parse(res, status);\r\n\t\t\t\tself.debug('[simplicite.getSysInfo] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.sysinfo = r.response;\r\n\t\t\t\t\tresolve && resolve.call(self, self.sysinfo);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.error || reject).call(self, self.getError(err));\r\n\t\t\t});\t\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Get development info\r\n\t * @param {string} [module] Module name\r\n\t * @param {object} [opts] Options\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} A promise to the develoment info (also avialable as the <code>devinfo</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.getDevInfo = (module, opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet p = '';\r\n\t\t\tif (module)\r\n\t\t\t\tp += '&module=' + encodeURIComponent(module);\r\n\t\t\tself.req.call(self, self.parameters.apppath + '?action=devinfo' + p, undefined, (res, status) => {\r\n\t\t\t\tconst r = self.parse(res, status);\r\n\t\t\t\tself.debug('[simplicite.getDevInfo] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!module)\r\n\t\t\t\t\t\tself.devinfo = r.response;\r\n\t\t\t\t\tresolve && resolve.call(self, r.response);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.error || reject).call(self, self.getError(err));\r\n\t\t\t});\t\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Get news\r\n\t * @param {object} [opts] Options\r\n\t * @param {boolean} [opts.inlineImages=false] Inline news images?\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<array>} A promise to the list of news (also avialable as the <code>news</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.getNews = (opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet p = '';\r\n\t\t\tif (opts.inlineImages)\r\n\t\t\t\tp += '&inline_images=' + !!opts.inlineImages;\r\n\t\t\tself.req.call(self, self.parameters.apppath + '?action=news' + p, undefined, (res, status) => {\r\n\t\t\t\tconst r = self.parse(res, status);\r\n\t\t\t\tself.debug('[simplicite.getNews] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.news = r.response;\r\n\t\t\t\t\tresolve && resolve.call(self, self.news);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.error || reject).call(self, self.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Index search\r\n\t * @param {string} request Index search request\r\n\t * @param {string} [object] Object\r\n\t * @param {object} [opts] Options\r\n\t * @param {boolean} [opts.metadata=false] Add meta data for each result\r\n\t * @param {number} [opts.context] Context\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<array>} A promise to a list of index search records\r\n\t * @function\r\n\t */\r\n\tthis.indexSearch = (request, object, opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet p = '';\r\n\t\t\tif (opts.metadata===true)\r\n\t\t\t\tp += '&_md=true';\r\n\t\t\tif (opts.context)\r\n\t\t\t\tp += '&context=' + encodeURIComponent(opts.context);\r\n\t\t\tself.req.call(self, self.parameters.apppath + '?action=indexsearch&request=' + encodeURIComponent(request ? request : '') + (object ? '&object=' + encodeURIComponent(object) : '') + p, undefined, (res, status) => {\r\n\t\t\t\tconst r = self.parse(res, status);\r\n\t\t\t\tself.debug('[simplicite.indexSearch] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error')\r\n\t\t\t\t\t(opts.error || self.error || reject).call(self, r.response);\r\n\t\t\t\telse\r\n\t\t\t\t\tresolve && resolve.call(self, r.response);\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.error || reject).call(self, self.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Get business object\r\n\t * @param {string} name Business object name\r\n\t * @param {string} [instance] Business object instance name, defaults to <code>js_&lt;object name&gt;</code>\r\n\t * @return {BusinessObject} Business object\r\n\t * @function\r\n\t */\r\n\tthis.getBusinessObject = (name, instance) => {\r\n\t\tconst cacheKey = this.getBusinessObjectCacheKey(name, instance);\r\n\t\tlet obj = businessObjectCache[cacheKey];\r\n\t\tif (!obj) {\r\n\t\t\tobj = new BusinessObject(this, name, instance);\r\n\t\t\tbusinessObjectCache[cacheKey] = obj;\r\n\t\t}\r\n\t\treturn obj;\r\n\t};\r\n\r\n\t/**\r\n\t * Get an external object\r\n\t * @param {string} name External object name\r\n\t * @function\r\n\t */\r\n\tthis.getExternalObject = (name) => {\r\n\t\treturn new ExternalObject(this, name);\r\n\t};\r\n\r\n\t/**\r\n\t * Get a resource URL\r\n\t * @param {string} code Resource code\r\n\t * @param {string} [type=IMG] Resource type (IMG=image (default), ICO=Icon, CSS=stylesheet, JS=Javascript, HTML=HTML) \r\n\t * @param {string} [object] Object name (not required for global resources)\r\n\t * @param {string} [objId] Object ID (not required for global resources)\r\n\t * @function\r\n\t */\r\n\tthis.getResourceURL = (code, type, object, objId) => {\r\n\t\treturn this.parameters.url + this.parameters.respath\r\n\t\t\t+ '?code=' + encodeURIComponent(code) + '&type=' + encodeURIComponent(type || 'IMG')\r\n\t\t\t+ (object ? '&object=' + encodeURIComponent(object) : '')\r\n\t\t\t+ (objId ? '&objid=' + encodeURIComponent(objId): '')\r\n\t\t\t+ (this.authtoken ? '_x_simplicite_authorization_=' + encodeURIComponent(this.authtoken) : '');\r\n\t};\r\n}\r\n\r\n/**\r\n * Grant (user).\r\n * <br/><span style=\"color: red;\">You <strong>should never</strong> instanciate this class directly\r\n * but rather use it from the <code>data</code> variable got using <code>getGrant</code></span>.\r\n * @class\r\n */\r\nfunction Grant() {\r\n\t/**\r\n\t * Get user ID\r\n\t * @return {string} User ID\r\n\t * @function\r\n\t */\r\n\tthis.getUserId = () => {\r\n\t\treturn this.userid;\r\n\t};\r\n\r\n\t/**\r\n\t * Get username\r\n\t * @return {string} Username\r\n\t * @function\r\n\t */\r\n\tthis.getUsername = () => {\r\n\t\treturn this.login;\r\n\t};\r\n\r\n\t/**\r\n\t * Alias to <code>getUsername</code>\r\n\t * @return {string} Login\r\n\t * @function\r\n\t */\r\n\tthis.getLogin = this.getUsername; // Naming flexibility\r\n\r\n\t/**\r\n\t * Get language\r\n\t * @return {string} Language\r\n\t * @function\r\n\t */\r\n\tthis.getLang = () => {\r\n\t\treturn this.lang;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Get email address\r\n\t * @return {string} Email address\r\n\t * @function\r\n\t */\r\n\tthis.getEmail = () => {\r\n\t\treturn this.email;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Get first name\r\n\t * @return {string} First name\r\n\t * @function\r\n\t */\r\n\tthis.getFirstname = () => {\r\n\t\treturn this.firstname;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Alias to <code>getFirstname</code>\r\n\t * @return {string} First name\r\n\t * @function\r\n\t */\r\n\tthis.getFirstName = this.getFirstname; // Naming flexibility\r\n\t\r\n\t/**\r\n\t * Get last name\r\n\t * @return {string} Last name\r\n\t * @function\r\n\t */\r\n\tthis.getLastname = () => {\r\n\t\treturn this.lastname;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Alias to <code>getLastname</code>\r\n\t * @return {string} Last name\r\n\t * @function\r\n\t */\r\n\tthis.getLastName = this.getLastname; // Naming flexibility\r\n\t\r\n\t/**\r\n\t * Get picture data URL\r\n\t * @return {string} Picture data URL\r\n\t * @function\r\n\t */\r\n\tthis.getPictureURL = () => {\r\n\t\tif (this.picture)\r\n\t\t\treturn 'data:' + this.picture.mime + ';base64,' + this.picture.content;\r\n\t};\r\n\r\n\t/**\r\n\t * Has responsibility\r\n\t * @param {string} group Group name\r\n\t * @return {boolean} True if user has a responsibility on the specified group\r\n\t * @function\r\n\t */\r\n\tthis.hasResponsibility = (group) => {\r\n\t\treturn this.responsibilities && this.responsibilities.indexOf(group) !== -1;\r\n\t};\r\n\r\n\t/**\r\n\t * Get text\r\n\t * @param {string} code Text code\r\n\t */\r\n\tthis.T = (code) => {\r\n\t\treturn this.texts ? this.texts[code] || '' : '';\r\n\t};\r\n}\r\n\r\n/**\r\n * Document\r\n * @class\r\n */\r\nfunction Document() {\r\n\t/**\r\n\t * Get the document's ID\r\n\t * @return ID\r\n\t * @function\r\n\t */\r\n\tthis.getId = () => {\r\n\t\treturn this.id;\r\n\t};\r\n\r\n\t/**\r\n\t * Get the document's MIME type\r\n\t * @return {string} MIME type\r\n\t * @function\r\n\t */\r\n\tthis.getMIMEType = () => {\r\n\t\treturn this.mime;\r\n\t};\r\n\r\n\t/**\r\n\t * Alias to <code>getMIMEType</code>\r\n\t * @return {string} MIME type\r\n\t * @function\r\n\t */\r\n\tthis.getMimeType = this.getMIMEType;\r\n\r\n\t/**\r\n\t * Set the document's MIME type\r\n\t * @param {string} mime MIME type\r\n\t * @function\r\n\t */\r\n\tthis.setMIMEType = (mime) => {\r\n\t\tthis.mime = mime;\r\n\t};\r\n\r\n\t/**\r\n\t * Alias to <code>setMIMEType</code>\r\n\t * @param {string} mime MIME type\r\n\t * @function\r\n\t */\r\n\tthis.setMimeType = this.setMIMEType;\r\n\r\n\t/**\r\n\t * Get the document's file name\r\n\t * @return {string} File name\r\n\t * @function\r\n\t */\r\n\tthis.getFilename = () => {\r\n\t\treturn this.filename;\r\n\t};\r\n\r\n\t/**\r\n\t * Alias to <code>getFilename</code>\r\n\t * @return {string} File name\r\n\t * @function\r\n\t */\r\n\tthis.getFileName = this.getFilename;\r\n\r\n\t/**\r\n\t * Set the document's file name\r\n\t * @param {string} filename File name\r\n\t * @function\r\n\t */\r\n\tthis.setFilename = (filename) => {\r\n\t\tthis.filename = filename;\r\n\t};\r\n\r\n\t/**\r\n\t * Alias to <code>setFilename</code>\r\n\t * @param {string} filename File name\r\n\t * @function\r\n\t */\r\n\tthis.setFileName = this.setFilename;\r\n\r\n\t/**\r\n\t * Get the document's content (encoded in base 64)\r\n\t * @return {string} Content\r\n\t * @function\r\n\t */\r\n\tthis.getContent = () => {\r\n\t\treturn this.content;\r\n\t};\r\n\r\n\t/**\r\n\t * Get the document's thumbnail (encoded in base 64)\r\n\t * @return {string} Thumbnail\r\n\t * @function\r\n\t */\r\n\tthis.getThumbnail = () => {\r\n\t\treturn this.thumbnail;\r\n\t};\r\n\r\n\t/**\r\n\t * Get the document's content as a buffer\r\n\t * @private\r\n\t */\r\n\tfunction getBuffer(data) {\r\n\t\treturn buffer.Buffer.from(data, 'base64');\r\n\t}\r\n\r\n\t/**\r\n\t * Get the document's content as an array buffer\r\n\t * @return {ArrayBuffer} Content as an array buffer\r\n\t * @function\r\n\t */\r\n\tthis.getContentAsArrayBuffer = () => {\r\n\t\treturn getBuffer(this.content).buffer;\r\n\t};\r\n\r\n\t/**\r\n\t * Get the document's thumbnail as an array buffer\r\n\t * @return {ArrayBuffer} Thumbnail as an array buffer\r\n\t * @function\r\n\t */\r\n\tthis.getThumbnailAsArrayBuffer = () => {\r\n\t\treturn getBuffer(this.thumbnail || '').buffer;\r\n\t};\r\n\r\n\t/**\r\n\t * Get the document's content as a text\r\n\t * @param {string} [encoding] Encoding, defaults to UTF-8\r\n\t * @return {string} Content as plain text\r\n\t * @function\r\n\t */\r\n\tthis.getContentAsText = (encoding) => {\r\n\t\treturn getBuffer(this.content).toString(encoding || 'utf-8');\r\n\t};\r\n\r\n\t/**\r\n\t * Set the document's content\r\n\t * @param {string} content Content (encoded in base 64)\r\n\t * @function\r\n\t */\r\n\tthis.setContent = (content) => {\r\n\t\tthis.content = content;\r\n\t};\r\n\r\n\t/**\r\n\t * Set the document's content from plain text string\r\n\t * @param {string} content Content as plain text string\r\n\t * @param {string} [encoding] Encoding, defaults to UTF-8\r\n\t * @function\r\n\t */\r\n\tthis.setContentFromText = (content, encoding) => {\r\n\t\tthis.content = buffer.Buffer.from(content, encoding || 'utf-8').toString('base64');\r\n\t};\r\n\r\n\t/**\r\n\t * Get the document's data URL\r\n\t * @param {boolean} [thumbnail] Thumbnail? If thumbnail does not exists the content is used.\r\n\t * @return {string} Data URL or nothing if content is empty\r\n\t */\r\n\tthis.getDataURL = (thumbnail) => {\r\n\t\tif (this.content)\r\n\t\t\treturn 'data:' + this.mime + ';base64,' + (thumbnail && this.thumbnail ? this.thumbnail : this.content);\r\n\t};\r\n\r\n\t/**\r\n\t * Get the document as a simple value\r\n\t * @return Value\r\n\t */\r\n\tthis.getValue = () => {\r\n\t\treturn JSON.parse(JSON.stringify(this)); // Strips all functions\r\n\t};\r\n}\r\n\r\n/**\r\n * Business object meta data.\r\n * <br/><span style=\"color: red;\">You <strong>should never</strong> instanciate this class directly\r\n * but rather use it from the <code>metadata</code> variable of your <code>BusinessObject</code> instances</span>.\r\n * @param {string} name Business object name\r\n * @param {string} [instance] Business object instance name, defaults to <code>js_&lt;object name&gt;</code>\r\n * @class\r\n */\r\nfunction BusinessObjectMetadata(name, instance) {\r\n\t/**\r\n\t * Name\r\n\t * @constant {string}\r\n\t */\r\n\tthis.name = name;\r\n\r\n\t/**\r\n\t * Instance name\r\n\t * @constant {string}\r\n\t */\r\n\tthis.instance = instance;\r\n\r\n\t/**\r\n\t * Row ID field name\r\n\t * @member {string}\r\n\t */\r\n\tthis.rowidfield = constants.DEFAULT_ROW_ID_NAME;\r\n\r\n\t/**\r\n\t * Display label\r\n\t * @member {string}\r\n\t */\r\n\tthis.label = name;\r\n\r\n\t/**\r\n\t * Help\r\n\t * @member {string}\r\n\t */\r\n\tthis.help = '';\r\n\r\n\t/**\r\n\t * Fields definitions\r\n\t * @member {array}\r\n\t */\r\n\tthis.fields = [];\r\n}\r\n\r\n/**\r\n * Business object.\r\n * <br/><span style=\"color: red;\">ou <strong>should never</strong> instanciate this class directly\r\n * but rather call <code>getBusinessObject</code> to get a cached instance</span>.\r\n * @param {object} ses Session\r\n * @param {string} name Business object name\r\n * @param {string} [instance] Business object instance name, defaults to <code>js_&lt;object name&gt;</code>\r\n * @class\r\n */\r\nfunction BusinessObject(ses, name, instance) {\r\n\tinstance = instance || 'js_' + name;\r\n\r\n\t/**\r\n\t * Session\r\n\t * @private\r\n\t */\r\n\tthis.session = ses;\r\n\r\n\t/**\r\n\t * Object metadata\r\n\t * @member {BusinessObjectMetadata}\r\n\t */\r\n\tthis.metadata = new BusinessObjectMetadata(name, instance);\r\n\r\n\t/**\r\n\t * Cache key\r\n\t * @constant {string}\r\n\t */\r\n\tthis.cacheKey = this.session.getBusinessObjectCacheKey(name, instance);\r\n\r\n\t/**\r\n\t * Path\r\n\t * @constant {string}\r\n\t */\r\n\tthis.path = this.session.parameters.objpath + '?object=' + encodeURIComponent(name) + '&inst=' + encodeURIComponent(instance);\r\n\r\n\t/**\r\n\t * Current item\r\n\t * @member {object}\r\n\t */\r\n\tthis.item = {};\r\n\r\n\t/**\r\n\t * Current filters\r\n\t * @member {object}\r\n\t */\r\n\tthis.filters = {};\r\n\r\n\t/**\r\n\t * Current list\r\n\t * @member {object[]}\r\n\t */\r\n\tthis.list = [];\r\n\r\n\t/**\r\n\t * Get meta data\r\n\t * @param {object} [opts] Options\r\n\t * @param {number} [opts.context] Context\r\n\t * @param {string} [opts.contextParam] Context parameter\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<BusinessObjectMetadata>} A promise to the object'ts meta data (also available as the <code>metadata</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.getMetaData = (opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet p = '';\r\n\t\t\tif (opts.context)\r\n\t\t\t\tp += '&context=' + encodeURIComponent(opts.context);\r\n\t\t\tif (opts.contextParam)\r\n\t\t\t\tp += '&contextparam=' + encodeURIComponent(opts.contextParam);\r\n\t\t\tself.session.req.call(self.session, self.path + '&action=metadata' + p, undefined, (res, status) => {\r\n\t\t\t\tconst r = self.session.parse(res, status);\r\n\t\t\t\tself.session.debug('[simplicite.BusinessObject.getMetaData] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.session.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.metadata = r.response;\r\n\t\t\t\t\tresolve && resolve.call(self, self.metadata);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.session.error || reject).call(self, self.session.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Get meta data (alias to getMetaData)\r\n\t * @param {object} [opts] Options\r\n\t * @param {number} [opts.context] Context\r\n\t * @param {string} [opts.contextParam] Context parameter\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<BusinessObjectMetadata>} A promise to the object'ts meta data (also available as the <code>metadata</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.getMetadata = this.getMetaData;\r\n\r\n\t/**\r\n\t * Get name\r\n\t * @return {string} Name\r\n\t * @function\r\n\t */\r\n\tthis.getName = () => {\r\n\t\treturn this.metadata.name;\r\n\t};\r\n\r\n\t/**\r\n\t * Get instance name\r\n\t * @return {string} Instance name\r\n\t * @function\r\n\t */\r\n\tthis.getInstance = () => {\r\n\t\treturn this.metadata.instance;\r\n\t};\r\n\r\n\t/**\r\n\t * Get display label\r\n\t * @return {string} Display label\r\n\t * @function\r\n\t */\r\n\tthis.getLabel = () => {\r\n\t\treturn this.metadata.label;\r\n\t};\r\n\r\n\t/**\r\n\t * Get help\r\n\t * @return {string} Help\r\n\t * @function\r\n\t */\r\n\tthis.getHelp = () => {\r\n\t\treturn this.metadata.help;\r\n\t};\r\n\r\n\t/**\r\n\t * Get all fields definitions\r\n\t * @return {array} Array of field definitions\r\n\t * @function\r\n\t */\r\n\tthis.getFields = () => {\r\n\t\treturn this.metadata.fields;\r\n\t};\r\n\r\n\t/**\r\n\t * Get a field definition\r\n\t * @param {string} fieldName Field name\r\n\t * @return {object} Field definition\r\n\t * @function\r\n\t */\r\n\tthis.getField = (fieldName) => {\r\n\t\tlet n = 0;\r\n\t\tconst fs = this.getFields();\r\n\t\twhile (n < fs.length && fs[n].name !== fieldName) n++;\r\n\t\tif (n < fs.length)\r\n\t\t\treturn fs[n];\r\n\t};\r\n\r\n\t/**\r\n\t * Get row ID field name\r\n\t * @return {string} Row ID field name\r\n\t * @function\r\n\t */\r\n\tthis.getRowIdFieldName = () => {\r\n\t\treturn this.metadata.rowidfield;\r\n\t};\r\n\r\n\t/**\r\n\t * Get row ID field definition\r\n\t * @return {object} Row ID field definition\r\n\t * @function\r\n\t */\r\n\tthis.getRowIdField = () => {\r\n\t\treturn this.getField(this.getRowIdFieldName());\r\n\t};\r\n\r\n\t/**\r\n\t * Get links\r\n\t * @return {array} Array of links\r\n\t * @function\r\n\t */\r\n\tthis.getLinks = () => {\r\n\t\treturn this.metadata.links;\r\n\t};\r\n\r\n\t/**\r\n\t * Get field type\r\n\t * @param {(string|object)} field Field name or definition\r\n\t * @return {string} Type (one of <code>constants.TYPE_*</code>)\r\n\t * @function\r\n\t */\r\n\tthis.getFieldType = (field) => {\r\n\t\tif (typeof field === 'string')\r\n\t\t\tfield = this.getField(field);\r\n\t\tif (field)\r\n\t\t\treturn field.type;\r\n\t};\r\n\r\n\t/**\r\n\t * Get field label\r\n\t * @param {(string|object)} field Field name or definition\r\n\t * @return {string} Value\r\n\t * @function\r\n\t */\r\n\tthis.getFieldLabel = (field) => {\r\n\t\tif (typeof field === 'string')\r\n\t\t\tfield = this.getField(field);\r\n\t\tif (field)\r\n\t\t\treturn field.label;\r\n\t};\r\n\r\n\t/**\r\n\t * Get value of field for item (or current item)\r\n\t * @param {(string|object)} field Field name or definition\r\n\t * @param {object} [item] Item (defaults to current item)\r\n\t * @return {string} Value\r\n\t * @function\r\n\t */\r\n\tthis.getFieldValue = (field, item) => {\r\n\t\tif (!item)\r\n\t\t\titem = this.item;\r\n\t\tif (field && item) {\r\n\t\t\treturn item[typeof field === 'string' ? field : field.name];\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Get the list value of a list of values field for item (or current item)\r\n\t * @param {(string|object)} field Field name or definition\r\n\t * @param {string} code Code\r\n\t * @return {string} Value\r\n\t * @function\r\n\t */\r\n\tthis.getFieldListValue = (field, item) => {\r\n\t\tif (typeof field === 'string')\r\n\t\t\tfield = this.getField(field);\r\n\t\tconst val = this.getFieldValue(field, item);\r\n\t\treturn field && field.listOfValues ? this.getListValue(field.listOfValues, val) : val;\r\n\t};\r\n\r\n\t/**\r\n\t * Get the data URL of an inlined document/image field for item (or current item)\r\n\t * @param {(string|object)} field Field name or definition\r\n\t * @param {object} [item] Item (defaults to current item)\r\n\t * @return {string} Document/image field data URL (or nothing if the field is not of document/image type or if it is not inlined or if it is empty)\r\n\t * @function\r\n\t */\r\n\tthis.getFieldDataURL = (field, item) => {\r\n\t\tif (typeof field !== 'string')\r\n\t\t\tfield = field.fullinput || field.name;\r\n\t\tconst val = this.getFieldValue(field, item);\r\n\t\tif (val && val.mime) // Inlined\r\n\t\t\treturn 'data:' + val.mime + ';base64,' + (val.content || val.thumbnail);\r\n\t};\r\n\r\n\t/**\r\n\t * Get the field's value as document/image for item (or current item)\r\n\t * @param {(string|object)} field Field name or definition\r\n\t * @param {object} [item] Item (defaults to current item)\r\n\t * @return {Document} Document/image (or nothing if the field is not of document/image type or if it is empty)\r\n\t * @function\r\n\t */\r\n\tthis.getFieldDocument = (field, item) => {\r\n\t\tif (typeof field !== 'string')\r\n\t\t\tfield = field.fullinput || field.input || field.name;\r\n\t\tconst val = this.getFieldValue(field, item);\r\n\t\tif (val && val.mime)\r\n\t\t\treturn Object.assign(new Document(), val);\r\n\t\telse\r\n\t\t\treturn val;\r\n\t};\r\n\r\n\t/**\r\n\t * Get the URL of a document/image field for item (or current item)\r\n\t * @param {(string|object)} field Field name or definition\r\n\t * @param {object} [item] Item (defaults to current item)\r\n\t * @param {boolean} [thumbnail=false] Thumbnail?\r\n\t * @return {string} Document/image field URL (or nothing if the field is not of document/image type or if it is empty)\r\n\t * @function\r\n\t */\r\n\tthis.getFieldDocumentURL = (field, item, thumbnail) => {\r\n\t\tif (typeof field !== 'string')\r\n\t\t\tfield = field.fullinput || field.input || field.name;\r\n\t\tlet val = this.getFieldValue(field, item);\r\n\t\tif (val && val.mime) // Inlined\r\n\t\t\tval = val.id;\r\n\t\tif (val) \r\n\t\t\treturn this.session.parameters.url + this.session.parameters.docpath\r\n\t\t\t\t+ '?object=' + encodeURIComponent(this.metadata.name)\r\n\t\t\t\t+ '&inst=' + encodeURIComponent(this.metadata.instance)\r\n\t\t\t\t+ '&field=' + encodeURIComponent(field)\r\n\t\t\t\t+ '&row_id=' + encodeURIComponent(this.getRowId(item))\r\n\t\t\t\t+ '&doc_id=' + encodeURIComponent(val)\r\n\t\t\t\t+ (thumbnail ? '&thumbnail=true' : '')\r\n\t\t\t\t+ (this.session.authtoken ? '&_x_simplicite_authorization_=' + encodeURIComponent(this.session.authtoken) : '');\r\n\t};\r\n\r\n\t/**\r\n\t * Get list value for code\r\n\t * @param {list} list List of values\r\n\t * @param {string} code Code\r\n\t * @return {string} Value\r\n\t * @function\r\n\t */\r\n\tthis.getListValue = (list, code) => {\r\n\t\tif (list) {\r\n\t\t\tfor (let i = 0; i < list.length; i++) {\r\n\t\t\t\tconst l = list[i];\r\n\t\t\t\tif (l.code === code)\r\n\t\t\t\t\treturn l.value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn code;\r\n\t};\r\n\r\n\t/**\r\n\t * Set value of field for item (or current item)\r\n\t * @param {(string|object)} field Field name or definition\r\n\t * @param {(string|object)} value Value\r\n\t * @param {object} [item] Item (defaults to current item)\r\n\t * @function\r\n\t */\r\n\tthis.setFieldValue = (field, value, item) => {\r\n\t\tif (!item)\r\n\t\t\titem = this.item;\r\n\t\tif (field && item) {\r\n\t\t\titem[typeof field === 'string' ? field : field.name] = value instanceof Document ? value.getValue() : value;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Is the field the row ID field?\r\n\t * @param {object} field Field definition\r\n\t * @return {boolean} True if the field is the row ID field\r\n\t * @function\r\n\t */\r\n\tthis.isRowIdField = (field) => {\r\n\t\treturn !field.ref && field.name === this.metadata.rowidfield;\r\n\t};\r\n\r\n\t/**\r\n\t * Is the field a timestamp field?\r\n\t * @param {object} field Field definition\r\n\t * @return {boolean} True if the field is a timestamp field\r\n\t * @function\r\n\t */\r\n\tthis.isTimestampField = (field) => {\r\n\t\tconst n = field.name;\r\n\t\treturn !field.ref && (n === 'created_by' || n === 'created_dt' || n === 'updated_by' || n === 'updated_dt');\r\n\t};\r\n\r\n\t/**\r\n\t * Get current filters\r\n\t * @param {object} [opts] Options\r\n\t * @param {number} [opts.context] Context\r\n\t * @param {boolean} [opts.reset] Reset filters?\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} Promise to the object's filters (also available as the <code>filters</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.getFilters =(opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet p = '';\r\n\t\t\tif (opts.context)\r\n\t\t\t\tp += '&context=' + encodeURIComponent(opts.context);\r\n\t\t\tif (opts.reset)\r\n\t\t\t\tp += '&reset=' + !!opts.reset;\r\n\t\t\tself.session.req.call(self.session, self.path + '&action=filters' + p, undefined, (res, status) => {\r\n\t\t\t\tconst r = self.session.parse(res, status);\r\n\t\t\t\tself.session.debug('[simplicite.BusinessObject.getFilters] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.session.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.filters = r.response;\r\n\t\t\t\t\tresolve && resolve.call(self, self.filters);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.session.error || reject).call(self, self.session.getError(err));\r\n\t\t\t});\r\n\t\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Build options parameters\r\n\t * @param {object} options Options\r\n\t * @private\r\n\t */\r\n\tfunction getReqOptions(options) {\r\n\t\tlet opts = '';\r\n\t\tif (options.context)\r\n\t\t\topts += '&context=' + encodeURIComponent(options.context);\r\n\t\tconst id = options.inlineDocs || options.inlineDocuments || options.inlineImages; // Naming flexibility\r\n\t\tif (id)\r\n\t\t\topts += '&inline_documents=' + encodeURIComponent(id.join ? id.join(',') : id);\r\n\t\tconst it = options.inlineThumbs || options.inlineThumbnails;  // Naming flexibility\r\n\t\tif (it)\r\n\t\t\topts += '&inline_thumbnails=' + encodeURIComponent(it.join ? it.join(',') : it);\r\n\t\tconst io = options.inlineObjs || options.inlineObjects;  // Naming flexibility\r\n\t\tif (io)\r\n\t\t\topts += '&inline_objects=' + encodeURIComponent(io.join ? io.join(',') : io);\r\n\t\treturn opts;\r\n\t}\r\n\r\n\t/**\r\n\t * Build request parameters\r\n\t * @param {object} data Data\r\n\t * @private\r\n\t */\r\n\tfunction getReqParams(data) {\r\n\t\tlet p = '';\r\n\t\tif (!data) return p;\r\n\t\tlet n = 0;\r\n\t\tfor (let i in data) {\r\n\t\t\tconst d = data[i] || '';\r\n\t\t\tif (d.name && d.content) { // Document ?\r\n\t\t\t\tif (d.content.startsWith('data:')) // Flexibility = extract content fron data URL\r\n\t\t\t\t\td.content = d.content.replace(/data:.*;base64,/, '');\r\n\t\t\t\tp += (n++ !== 0 ? '&' : '') + i + '=' + encodeURIComponent('id|' + (d.id ? d.id : '0') + '|name|' + d.name + '|content|' + d.content);\r\n\t\t\t} else if (d.object && d.row_id) { // Object ?\r\n\t\t\t\tp += (n++ !== 0 ? '&' : '') + i + '=' + encodeURIComponent('object|' + d.object + '|row_id|' + d.row_id);\r\n\t\t\t} else if (d.sort) { // Array ?\r\n\t\t\t\tfor (let j = 0; j < d.length; j++)\r\n\t\t\t\t\tp += (n++ !== 0 ? '&' : '') + i + '=' + encodeURIComponent(d[j]);\r\n\t\t\t} else {\r\n\t\t\t\tp += (n++ !== 0 ? '&' : '') + i + '=' + encodeURIComponent(d);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn p;\r\n\t}\r\n\r\n\t/**\r\n\t * Count\r\n\t * @param {object} [filters] Filters, defaults to current filters if not set\r\n\t * @param {object} [opts] Options\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} Promise to the count\r\n\t * @function\r\n\t */\r\n\tthis.count = (filters, opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tself.filters = filters || {};\r\n\t\t\tself.session.req.call(self.session, self.path + '&action=count', getReqParams(self.filters), (res, status) => {\r\n\t\t\t\tconst r = self.session.parse(res, status);\r\n\t\t\t\tself.session.debug('[simplicite.BusinessObject.getCount] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.session.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.count = r.response.count;\r\n\t\t\t\t\tself.page = r.response.page >= 0 ? r.response.page + 1 : undefined;\r\n\t\t\t\t\tself.maxpage = r.response.maxpage >= 0 ? r.response.maxpage + 1 : undefined;\r\n\t\t\t\t\tself.list = [];\r\n\t\t\t\t\tresolve && resolve.call(self, self.count);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.session.error || reject).call(self, self.session.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Count, **deprecated**: use <code>count</code> instead\r\n\t * @deprecated\r\n\t * @function\r\n\t */\r\n\tthis.getCount = this.count;\r\n\r\n\t/**\r\n\t * Search\r\n\t * @param {object} [filters] Filters, defaults to current filters if not set\r\n\t * @param {object} [opts] Options\r\n\t * @param {number} [opts.page] Page number, a non paginated list is returned if not set\r\n\t * @param {boolean} [opts.metadata=false] Refresh meta data?\r\n\t * @param {boolean} [opts.visible] Return only visible fields?\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<array>} Promise to a list of records (also available as the <code>list</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.search = (filters, opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet p = getReqOptions(opts);\r\n\t\t\tif (opts.page > 0)\r\n\t\t\t\tp += '&page=' + (opts.page - 1);\r\n\t\t\tif (opts.metadata===true)\r\n\t\t\t\tp += '&_md=true';\r\n\t\t\tif (opts.visible===true)\r\n\t\t\t\tp += '&_visible=true';\r\n\t\t\tself.filters = filters || {};\r\n\t\t\tself.session.req.call(self.session, self.path + '&action=search' + p, getReqParams(self.filters), (res, status) => {\r\n\t\t\t\tconst r = self.session.parse(res, status);\r\n\t\t\t\tself.session.debug('[simplicite.BusinessObject.search] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.session.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (res.meta)\r\n\t\t\t\t\t\tself.metadata = r.response.meta;\r\n\t\t\t\t\tself.count = r.response.count;\r\n\t\t\t\t\tself.page = r.response.page >= 0 ? r.response.page + 1 : undefined;\r\n\t\t\t\t\tself.maxpage = r.response.maxpage >= 0 ? r.response.maxpage + 1 : undefined;\r\n\t\t\t\t\tself.list = r.response.list;\r\n\t\t\t\t\tresolve && resolve.call(self, self.list);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.session.error || reject).call(self, self.session.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Get\r\n\t * @param {string} rowId Row ID\r\n\t * @param {object} [opts] Options\r\n\t * @param {boolean} [opts.metadata=false] Refresh meta data?\r\n\t * @param {string[]} [opts.fields] List of field names to return, all fields are returned by default\r\n\t * @param {string} [opts.treeview] Return the named tree view structure\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} Promise to the record (also available as the <code>item</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.get = (rowId, opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet p = getReqOptions(opts);\r\n\t\t\tconst  tv = opts.treeView;\r\n\t\t\tif (tv)\r\n\t\t\t\tp += '&treeview=' + encodeURIComponent(tv);\r\n\t\t\tif (opts.fields) {\r\n\t\t\t\tfor (let i = 0; i < opts.fields.length; i++) {\r\n\t\t\t\t\tp += '&fields=' + encodeURIComponent(opts.fields[i].replace('.', '__'));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (opts.metadata)\r\n\t\t\t\tp += '&_md=true';\r\n\t\t\tif (opts.social)\r\n\t\t\t\tp += '&_social=true';\r\n\t\t\tself.session.req.call(self.session, self.path + '&action=get&' + self.metadata.rowidfield + '=' + encodeURIComponent(rowId) + p, undefined, (res, status) => {\r\n\t\t\t\tconst r = self.session.parse(res, status);\r\n\t\t\t\tself.session.debug('[simplicite.BusinessObject.get] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.session.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (r.response.meta)\r\n\t\t\t\t\t\tself.metadata = r.response.meta;\r\n\t\t\t\t\tif (r.response.data)\r\n\t\t\t\t\t\tself.item = tv ? r.response.data.item : r.response.data;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tself.item = tv ? r.response.item : r.response;\r\n\t\t\t\t\tresolve && resolve.call(self, tv ? r.response : self.item);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.session.error || reject).call(self, self.session.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Get for create\r\n\t * @param {object} [opts] Options\r\n\t * @param {boolean} [opts.metadata=false] Refresh meta data?\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} Promise to the record to create (also available as the <code>item</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.getForCreate = (opts) => {\r\n\t\topts = opts || {};\r\n\t\tdelete opts.treeview; // Inhibited in this context\r\n\t\tdelete opts.fields; // Inhibited in this context\r\n\t\topts.context = constants.CONTEXT_CREATE;\r\n\t\treturn this.get(this.session.constants.DEFAULT_ROW_ID, opts);\r\n\t};\r\n\r\n\t/**\r\n\t * Get for update\r\n\t * @param {string} rowId Row ID\r\n\t * @param {object} [opts] Options\r\n\t * @param {boolean} [opts.metadata=false] Refresh meta data?\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} Promise to the record to update (also available as the <code>item</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.getForUpdate = (rowId, opts) => {\r\n\t\topts = opts || {};\r\n\t\tdelete opts.treeview; // Inhibited in this context\r\n\t\tdelete opts.fields; // Inhibited in this context\r\n\t\topts.context = constants.CONTEXT_UPDATE;\r\n\t\treturn this.get(rowId, opts);\r\n\t};\r\n\r\n\t/**\r\n\t * Get for copy\r\n\t * @param {string} rowId Row ID to copy\r\n\t * @param {object} [opts] Options\r\n\t * @param {boolean} [opts.metadata=false] Refresh meta data?\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} Promise to the record to create (also available as the <code>item</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.getForCopy = (rowId, opts) => {\r\n\t\topts = opts || {};\r\n\t\tdelete opts.treeview; // Inhibited in this context\r\n\t\tdelete opts.fields; // Inhibited in this context\r\n\t\topts.context = constants.CONTEXT_COPY;\r\n\t\treturn this.get(rowId, opts);\r\n\t};\r\n\r\n\t/**\r\n\t * Get for delete\r\n\t * @param {string} rowId Row ID\r\n\t * @param {object} [opts] Options\r\n\t * @param {boolean} [opts.metadata=false] Refresh meta data?\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} Promise to the record to delete (also available as the <code>item</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.getForDelete = (rowId, opts) => {\r\n\t\topts = opts || {};\r\n\t\tdelete opts.treeview; // Inhibited in this context\r\n\t\tdelete opts.fields; // Inhibited in this context\r\n\t\topts.context = constants.CONTEXT_DELETE;\r\n\t\treturn this.get(rowId, opts);\r\n\t};\r\n\r\n\t/**\r\n\t * Get specified or current item's row ID value\r\n\t * @param {object} [item] Item, defaults to current item\r\n\t * @return {string} Item's row ID value\r\n\t * @function\r\n\t */\r\n\tthis.getRowId = (item) => {\r\n\t\titem = item || this.item;\r\n\t\tif (item)\r\n\t\t\treturn item[this.getRowIdFieldName()];\r\n\t};\r\n\r\n\t/**\r\n\t * Populate\r\n\t * @param {string} rowId Row ID\r\n\t * @param {object} [opts] Options\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} Promise to the populated record (also available as the <code>item</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.populate = (rowId, opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet p = getReqOptions(opts);\r\n\t\t\tself.session.req.call(self.session, self.path + '&action=populate&' + self.metadata.rowidfield + '=' + encodeURIComponent(rowId) + p, undefined, (res, status) => {\r\n\t\t\t\tconst r = self.session.parse(res, status);\r\n\t\t\t\tself.session.debug('[simplicite.BusinessObject.populate] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.session.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.item = r.response.data ? r.response.data : r.response;\r\n\t\t\t\t\tresolve && resolve.call(self, self.item);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.session.error || reject).call(self, self.session.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Save (create or update depending on item row ID value)\r\n\t * @param {object} item Item (defaults to current item)\r\n\t * @param {object} [opts] Options\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} Promise to the saved record (also available as the <code>item</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.save = (item, opts) => {\r\n\t\tif (item)\r\n\t\t\tthis.item = item;\r\n\t\tconst rowId = this.item[this.metadata.rowidfield];\r\n\t\tif (!rowId || rowId === constants.DEFAULT_ROW_ID)\r\n\t\t\treturn this.create(item, opts);\r\n\t\telse\r\n\t\t\treturn this.update(item, opts);\r\n\t};\r\n\r\n\t/**\r\n\t * Create (create or update)\r\n\t * @param {object} item Item (defaults to current item)\r\n\t * @param {object} [opts] Options\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} Promise to the created record (also available as the <code>item</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.create = (item, opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tif (item)\r\n\t\t\t\tself.item = item;\r\n\t\t\tself.item.row_id = self.session.constants.DEFAULT_ROW_ID;\r\n\t\t\tlet p = getReqOptions(opts);\r\n\t\t\tself.session.req.call(self.session, self.path + '&action=create' + p, getReqParams(self.item), (res, status) => {\r\n\t\t\t\tconst r = self.session.parse(res, status);\r\n\t\t\t\tself.session.debug('[simplicite.BusinessObject.create] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.session.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.item = r.response.data ? r.response.data : r.response;\r\n\t\t\t\t\tresolve && resolve.call(self, self.item);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.session.error || reject).call(self, self.session.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Update\r\n\t * @param {object} item Item (defaults to current item)\r\n\t * @param {object} [opts] Options\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} Promise to the updated record (also available as the <code>item</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.update = (item, opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tif (item)\r\n\t\t\t\tself.item = item;\r\n\t\t\tlet p = getReqOptions(opts);\r\n\t\t\tself.session.req.call(self.session, self.path + '&action=update' + p, getReqParams(self.item), (res, status) => {\r\n\t\t\t\tconst r = self.session.parse(res, status);\r\n\t\t\t\tself.session.debug('[simplicite.BusinessObject.update] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.session.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.item = r.response.data ? r.response.data : r.response;\r\n\t\t\t\t\tresolve && resolve.call(self, self.item);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.session.error || reject).call(self, self.session.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Delete\r\n\t * @param {object} item Item (defaults to current item)\r\n\t * @param {object} [opts] Options\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise} Promise (the <code>item</code> member is emptied)\r\n\t * @function\r\n\t */\r\n\tthis.del = (item, opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tif (item)\r\n\t\t\t\tself.item = item;\r\n\t\t\tself.session.req.call(self.session, self.path + '&action=delete&' + self.metadata.rowidfield + '=' + encodeURIComponent(self.item[self.metadata.rowidfield]), undefined, (res, status) => {\r\n\t\t\t\tconst r = self.session.parse(res, status);\r\n\t\t\t\tself.session.debug('[simplicite.BusinessObject.del] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.session.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.item = undefined;\r\n\t\t\t\t\tdelete r.response.undoredo;\r\n\t\t\t\t\tresolve && resolve.call(self, r.response);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.session.error || reject).call(self, self.session.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Invoke a custom action\r\n\t * @param {string} action Action name\r\n\t * @param {string} [rowId] Row ID\r\n\t * @param {object} [opts] Options\r\n\t * @param {function} [opts.parameters] Optional action parameters as key/value pairs\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<string|object>} A promise to the action result\r\n\t * @function\r\n\t */\r\n\tthis.action = (action, rowId, opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tself.session.req.call(self.session, self.path + '&action=' + encodeURIComponent(action) + (rowId ? '&' + self.getRowIdFieldName() + '=' + encodeURIComponent(rowId) : ''), getReqParams(opts.parameters), (res, status) => {\r\n\t\t\t\tconst r = self.session.parse(res, status);\r\n\t\t\t\tself.session.debug('[simplicite.BusinessObject.action(' + action + ')] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.session.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst result = r.response.result;\r\n\t\t\t\t\tresolve && resolve.call(self, result);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.session.error || reject).call(self, self.session.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Build a pivot table\r\n\t * @param {string} crosstab Pivot table name\r\n\t * @param {object} [opts] Options\r\n\t * @param {object} [opts.filters] Filters, by default current filters are used\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} A promise to the pivot table data (also avialable as the <code>crosstabdata</code> member)\r\n\t * @function\r\n\t */\r\n\tthis.crosstab = (crosstab, opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tif (opts.filters)\r\n\t\t\t\tself.filters = opts.filters;\r\n\t\t\tself.session.req.call(self.session, self.path + '&action=crosstab&crosstab=' + encodeURIComponent(crosstab), getReqParams(self.filters), (res, status) => {\r\n\t\t\t\tconst r = self.session.parse(res, status);\r\n\t\t\t\tself.session.debug('[simplicite.BusinessObject.crosstab(' + crosstab + ')] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.session.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.crosstabdata = r.response;\r\n\t\t\t\t\tresolve && resolve.call(self, self.crosstabdata);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.session.error || reject).call(self, self.session.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Build a custom publication\r\n\t * @param {string} prt Publication name\r\n\t * @param {string} [rowId] Row ID\r\n\t * @param {object} [opts] Options\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<Document>} A promise to the document of the publication\r\n\t * @function\r\n\t */\r\n\tthis.print = (prt, rowId, opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tif (opts.filters)\r\n\t\t\t\tself.filters = opts.filters;\r\n\t\t\tlet p = '';\r\n\t\t\tif (opts.all)\r\n\t\t\t\tp += '&all=' + !!opts.all;\r\n\t\t\tif (opts.mailing)\r\n\t\t\t\tp += '&mailing=' + !!opts.mailing;\r\n\t\t\tself.session.req.call(self.session, self.path + '&action=print&printtemplate=' + encodeURIComponent(prt) + (rowId ? '&' + self.getRowIdFieldName() + '=' + encodeURIComponent(rowId) : '') + p, undefined, (res, status) => {\r\n\t\t\t\tconst r = self.session.parse(res, status);\r\n\t\t\t\tself.session.debug('[simplicite.BusinessObject.print(' + prt + ')] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.session.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresolve && resolve.call(self, Object.assign(new Document(), r.response));\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.session.error || reject).call(self, self.session.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Set an object parameter\r\n\t * @param {string} param Parameter name\r\n\t * @param {string} value Parameter value\r\n\t * @param {object} [opts] Options\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} Promise\r\n\t * @function\r\n\t */\r\n\tthis.setParameter = (param, value, opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet p = { name: param };\r\n\t\t\tif (value) p.value = value;\r\n\t\t\tself.session.req.call(self.session, self.path + '&action=setparameter', getReqParams(p), (res, status) => {\r\n\t\t\t\tconst r = self.session.parse(res, status);\r\n\t\t\t\tself.session.debug('[simplicite.BusinessObject.setParameter(' + p.name + ')] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.session.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst result = r.response.result;\r\n\t\t\t\t\tresolve && resolve.call(self, result);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.session.error || reject).call(self, self.session.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Get an object parameter\r\n\t * @param {string} param Parameter name\r\n\t * @param {object} [opts] Options\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @return {promise<object>} Promise to the parameter value\r\n\t * @function\r\n\t */\r\n\tthis.getParameter = (param, opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet p = { name: param };\r\n\t\t\tself.session.req.call(self.session, self.path + '&action=getparameter', getReqParams(p), (res, status) => {\r\n\t\t\t\tconst r = self.session.parse(res, status);\r\n\t\t\t\tself.session.debug('[simplicite.BusinessObject.getParameter(' + p.name + ')] HTTP status = ' + status + ', response type = ' + r.type);\r\n\t\t\t\tif (r.type === 'error') {\r\n\t\t\t\t\t(opts.error || self.session.error || reject).call(self, r.response);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst result = r.response.result;\r\n\t\t\t\t\tresolve && resolve.call(self, result);\r\n\t\t\t\t}\r\n\t\t\t}, err => {\r\n\t\t\t\t(opts.error || self.session.error || reject).call(self, self.session.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Get an object resource URL\r\n\t * @param {string} code Resource code\r\n\t * @param {string} [type=IMG] Resource type (IMG=image (default), ICO=Icon, CSS=stylesheet, JS=Javascript, HTML=HTML)\r\n\t * @function\r\n\t */\r\n\tthis.getResourceURL = (code, type) => {\r\n\t\treturn this.session.getResourceURL(code, type, this.metadata.name, this.metadata.id);\r\n\t};\r\n}\r\n\r\n/**\r\n * External object meta data.\r\n * <br/><span style=\"color: red;\">You <strong>should never</strong> instanciate this class directly\r\n * but rather use it from the <code>metadata</code> variable of your <code>ExternalObject</code> instances</span>.\r\n * @param {string} name Business object name\r\n * @class\r\n */\r\nfunction ExternalObjectMetadata (name) {\r\n\t/**\r\n\t * Name\r\n\t * @constant {string}\r\n\t */\r\n\tthis.name = name;\r\n}\r\n\r\n/**\r\n * External object.\r\n * <br/><span style=\"color: red;\">ou <strong>should never</strong> instanciate this class directly\r\n * but rather call <code>getExternalObject</code></span>.\r\n * @param {object} ses Session\r\n * @param {string} name Business object name\r\n * @class\r\n */\r\nfunction ExternalObject(ses, name) {\r\n\t/**\r\n\t * Session\r\n\t * @private\r\n\t */\r\n\tthis.session = ses;\r\n\r\n\t/**\r\n\t * Metadata\r\n\t * @constant\r\n\t */\r\n\tthis.metadata = new ExternalObjectMetadata(name);\r\n\r\n\t/**\r\n\t * Path\r\n\t * @constant {string}\r\n\t */\r\n\tthis.path = this.session.parameters.extpath + '/' + encodeURIComponent(name);\r\n\r\n\t/**\r\n\t * Get name\r\n\t * @return {string} Name\r\n\t * @function\r\n\t */\r\n\tthis.getName = () => {\r\n\t\treturn this.metadata.name;\r\n\t};\r\n\r\n\t/**\r\n\t * Build URL-encoded parameters\r\n\t * @param {object} params URL parameters as key/value pairs\r\n\t * @function\r\n\t */\r\n\tthis.callParams = (params) => {\r\n\t\tlet p = '';\r\n\t\tif (!params) return p;\r\n\t\tlet n = 0;\r\n\t\tfor (let i in params) {\r\n\t\t\tconst v = params[i] || '';\r\n\t\t\tif (v.sort) { // Array ?\r\n\t\t\t\tfor (let j = 0; j < v.length; j++)\r\n\t\t\t\t\tp += (n++ !== 0 ? '&' : '') + i + '=' + encodeURIComponent(v[j]);\r\n\t\t\t} else {\r\n\t\t\t\tp += (n++ !== 0 ? '&' : '') + i + '=' + encodeURIComponent(v);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn p;\r\n\t};\r\n\r\n\t/**\r\n\t * Call an external object\r\n\t * @param {object} [params] Optional URL parameters\r\n\t * @param {object} [data] Optional data (for 'POST' and 'PUT' methods only)\r\n\t * @param {object} [opts] Options\r\n\t * @param {function} [opts.error] Error handler function\r\n\t * @param {object} [opts.method] Optional method 'GET', 'POST', 'PUT' or 'DELETE' (defaults to 'GET' if data is not set or 'POST\" if data is set\r\n\t * @param {function} [opts.contentType] Optional data content type (for 'POST' and 'PUT' methods only)\r\n\t * @return {promise<object>} Promise to the external object content\r\n\t * @function\r\n\t */\r\n\tthis.call = (params, data, opts) => {\r\n\t\tconst self = this;\r\n\t\topts = opts || {};\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet p = '';\r\n\t\t\tif (params)\r\n\t\t\t\tp = '?' + self.callParams(params);\r\n\t\t\tconst m = opts.method ? opts.method.toUpperCase() : (data ? 'POST' : 'GET');\r\n\t\t\tconst h = {};\r\n\t\t\tif (opts.contentType) {\r\n\t\t\t\th['Content-Type'] = opts.contentType;\r\n\t\t\t} else if (data) { // Try to guess type...\r\n\t\t\t\th['Content-Type'] = typeof data === 'string' ? 'application/x-www-form-urlencoded' : 'application/json';\r\n\t\t\t}\r\n\t\t\tlet b = self.session.getBearerTokenHeader();\r\n\t\t\tif (b) {\r\n\t\t\t\th['X-Simplicite-Authorization'] = b;\r\n\t\t\t} else {\r\n\t\t\t\tb = self.session.getBasicAuthHeader();\r\n\t\t\t\tif (b)\r\n\t\t\t\t\th.Authorization = b;\r\n\t\t\t}\r\n\t\t\tconst u = self.session.parameters.url + self.path + p;\r\n\t\t\tconst d = data ? (typeof data === 'string' ? data : JSON.stringify(data)) : undefined;\r\n\t\t\tself.session.debug('[simplicite.ExternalObject.call] ' + m + ' ' + u + ' with ' + (d ? ' with ' + d : ''));\r\n\t\t\tfetch(u, {\r\n\t\t\t\tmethod: m,\r\n\t\t\t\theaders: h,\r\n\t\t\t\ttimeout: self.session.timeout * 1000, // useless because there is no timeout in fetch API\r\n\t\t\t\tmode: 'cors',\r\n\t\t\t\tcredentials: 'include',\r\n\t\t\t\tbody: d\r\n\t\t\t}).then(res => {\r\n\t\t\t\tconst type = res.headers.get('content-type');\r\n\t\t\t\tself.session.debug('[simplicite.ExternalObject.call(' + p + ')] HTTP status = ' + res.status + ', response content type = ' + type);\r\n\t\t\t\tif (type && type.startsWith('application/json')) { // JSON\r\n\t\t\t\t\tres.json().then(jsonData => {\r\n\t\t\t\t\t\tresolve && resolve.call(self, jsonData, res.status, res.headers);\r\n\t\t\t\t\t}).catch(err => {\r\n\t\t\t\t\t\t(opts.error || self.error || reject).call(self, self.getError(err));\r\n\t\t\t\t\t});\r\n\t\t\t\t} else if (type && type.startsWith('text/')) { // Text\r\n\t\t\t\t\tres.text().then(textData => {\r\n\t\t\t\t\t\tresolve && resolve.call(self, textData, res.status, res.headers);\r\n\t\t\t\t\t}).catch(err => {\r\n\t\t\t\t\t\t(opts.error || self.error || reject).call(self, self.getError(err));\r\n\t\t\t\t\t});\r\n\t\t\t\t} else { // Binary\r\n\t\t\t\t\tres.arrayBuffer().then(binData => {\r\n\t\t\t\t\t\tresolve && resolve.call(self, binData, res.status, res.headers);\r\n\t\t\t\t\t}).catch(err => {\r\n\t\t\t\t\t\t(opts.error || self.error || reject).call(self, self.getError(err));\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}).catch(err => {\r\n\t\t\t\t(opts.error || self.error || reject).call(self, self.getError(err));\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n}\r\n\r\nexport default {\r\n\tsession: session,\r\n\tSession: Session,\r\n\tGrant: Grant,\r\n\tBusinessObject: BusinessObject,\r\n\tBusinessObjectMetadata: BusinessObjectMetadata,\r\n\tExternalObject: ExternalObject\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
